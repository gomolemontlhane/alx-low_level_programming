What is the space complexity (worst case) of an iterative linear search algorithm in an array of size n?

In an iterative linear search algorithm, the space complexity primarily concerns the additional memory required by the algorithm to execute its operations. For a simple linear search algorithm:

We only use a constant amount of extra space regardless of the size of the input array.
In detail:

The iterative linear search algorithm typically operates by sequentially checking each element in the array one by one.
It doesn't require any significant additional memory allocation proportional to the size of the input array.
The algorithm mainly uses a few extra variables (like loop counters and temporary variables), which do not depend on the size of the array.
Therefore, the space complexity of an iterative linear search algorithm in an array of size n is O(1) (constant space complexity).

Explanation:

The space complexity of O(1) indicates that the amount of extra memory used by the algorithm remains constant and does not increase with the size of the input.
The algorithm's space usage does not scale with the input size n; it only requires a fixed amount of space to perform its operations regardless of the array's length.

Example:
int linear_search(int *array, size_t size, int value)
{
    for (size_t i = 0; i < size; i++)
    {
        if (array[i] == value)
            return i; // Found the value
    }
    return -1; // Value not found
}
