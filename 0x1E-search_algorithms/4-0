What is the time complexity (worst case) of a binary search in an array of size n?

Binary search is a divide-and-conquer algorithm used to search for a target value within a sorted array. The time complexity of binary search is determined by how the search space is divided in each iteration.

In a binary search:

The array is repeatedly divided into smaller subarrays by comparing the target value with the middle element of the current subarray.
If the middle element matches the target value, the search is successful.
If the middle element is greater than the target value, the search continues in the left half of the array.
If the middle element is less than the target value, the search continues in the right half of the array.
The algorithm eliminates half of the remaining elements in each iteration, leading to a logarithmic reduction in the search space.

Worst Case Time Complexity (Big O):

In the worst-case scenario, the binary search algorithm will have to continue dividing the array until the target value is found or the search space is exhausted.
The worst-case time complexity of binary search is O(log n), where n is the number of elements in the array.
Explanation:

Binary search operates by halving the search space in each step, effectively reducing the size of the problem exponentially.
The logarithmic time complexity reflects the fact that the number of operations required is proportional to the logarithm (base 2) of the size of the input array.
As the size of the array increases, the number of iterations needed by the binary search algorithm grows much slower compared to linear search, making it highly efficient for large datasets.

Example:
int binary_search(int *array, size_t size, int value)
{
    size_t left = 0;
    size_t right = size - 1;

    while (left <= right)
    {
        size_t mid = left + (right - left) / 2;

        if (array[mid] == value)
            return mid; // Found the value
        else if (array[mid] < value)
            left = mid + 1; // Search in the right half
        else
            right = mid - 1; // Search in the left half
    }

    return -1; // Value not found
}
