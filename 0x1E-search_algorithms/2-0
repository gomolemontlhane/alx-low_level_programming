Task 2: Big O #0
What is the time complexity (worst case) of a linear search in an array of size n?

In a linear search, the worst-case time complexity occurs when the target element is either the last element of the array or not present in the array. In the worst case:

If the target element is present, the linear search will have to traverse through all n elements of the array to find it.
If the target element is not present, the search will also traverse through all n elements.
Therefore, the worst-case time complexity of a linear search in an array of size n is O(n).

Explanation:

In the worst scenario, the algorithm might need to examine each element in the array once before finding the target element or determining its absence.
As the size of the input (n) increases, the number of operations (comparisons) linearly increases.

example
int linear_search(int *array, size_t size, int value)
{
    for (size_t i = 0; i < size; i++)
    {
        if (array[i] == value)
            return i; // Found the value
    }
    return -1; // Value not found
}
